{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Membrain-Seg","text":"<p>Membrain-Seg is a Python project developed by teamtomo for membrane segmentation in 3D in 3D for cryo-electron tomography (cryo-ET). This tool aims to provide researchers with an efficient and reliable method for segmenting membranes in 3D microscopic images. Membrain-Seg is currently under early development, so we may make breaking changes between releases.</p>"},{"location":"#overview","title":"Overview","text":"<p>MemBrain-seg is a practical tool for membrane segmentation in cryo-electron tomograms. It's built on U-Net architecture and makes use of a pre-trained model for efficient performance.</p> <p>If you wish, you can also train a new model using your own data, or combine it with our available public dataset.</p> <p>To enhance segmentation, MemBrain-seg includes preprocessing functions. These help to adjust your tomograms so they're similar to the data our network was trained on, making the process smoother and more efficient.</p> <p>Explore MemBrain-seg, use it for your needs, and let us know how it works for you!</p>"},{"location":"#features","title":"Features","text":""},{"location":"#segmentation","title":"Segmentation","text":"<p>... explain segmentation ...</p>"},{"location":"#model-training","title":"Model training","text":"<p>... explain training ...</p>"},{"location":"#preprocessing","title":"Preprocessing","text":"<p>Currently, we provide the following two preprocessing options: - pixel size matching: Rescale your tomogram to match the training pixel sizes - Fourier amplitude matching: Scale Fourier components to match the \"style\" of different tomograms</p> <p>For more information, see the Preprocessing subsection.</p>"},{"location":"installation/","title":"Installation","text":"<p>Explain how to install.</p>"},{"location":"Usage/Preprocessing/","title":"Preprocessing","text":""},{"location":"Usage/Preprocessing/#introduction","title":"Introduction","text":"<p>This is a quick guide on how to use the tomo_preprocessing module for MemBrain-seg. </p> <p>In order to improve the segmentation performance of MemBrain-seg on your tomograms, it may be beneficial to first perform some preprocessing to \"normalize\" the tomograms to similar styles as the training data.</p> <p>This module currently allows you to use the following preprocessing methods:</p> <ul> <li>Pixel size matching: Rescaling of your tomogram to a similar pixel size as the training data</li> <li>Fourier amplitude matching: Rescaling of Fourier components to pronounce different features in the tomograms (adapted from DeePiCt)</li> </ul>"},{"location":"Usage/Preprocessing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>When to use what?</li> <li>Usage</li> <li>Available Commands</li> <li>Pixel Size Matching</li> <li>Fourier Amplitude Matching</li> </ul>"},{"location":"Usage/Preprocessing/#when-to-use-what","title":"When to use what?","text":"<p>We are still exploring when it makes sense to use which preprocessing technique. But here are  already some rules of thumb:</p> <ol> <li>Whenever your pixel sizes differs by a lot from around 10-12\u00c5 / pixel, you should consider using pixel size matching. We recommend to match to a pixel size of 10\u00c5.</li> <li>The Fourier amplitude matching only works in some cases, depending on the CTFs of input  and target tomograms. Our current recommendation is: If you're not satisfied with MemBrain's  segmentation performance, why not give the amplitude matching a shot?</li> </ol> <p>More detailed guidelines are in progress!</p>"},{"location":"Usage/Preprocessing/#usage","title":"Usage","text":"<p>You can control all commands of this preprocessing module by typing <code>tomo_preprocessing</code>+ some options. To view all available commands, use:</p> <pre><code>tomo_preprocessing --help\n</code></pre> <p>For help on a specific command, use:</p> <pre><code>tomo_preprocessing &lt;command&gt; --help\n</code></pre>"},{"location":"Usage/Preprocessing/#available-commands","title":"Available Commands","text":"<ul> <li>match_pixel_size: Tomogram rescaling to specified pixel size. Example: <code>tomo_preprocessing match_pixel_size --input_tomogram &lt;path-to-tomo&gt; --output_path &lt;path-to-output&gt; --pixel_size_out 10.0 --pixel_size_in &lt;your-px-size&gt;</code></li> <li>match_seg_to_tomo: Segmentation rescaling to fit to target tomogram's shape. Example: <code>tomo_preprocessing match_seg_to_tomo --seg_path &lt;path-to-seg&gt; --orig_tomo_path &lt;path-to-tomo&gt; --output_path &lt;path-to-output&gt;</code></li> <li>extract_spectrum: Extracts the radially averaged amplitude spectrum from the input tomogram. Example: <code>tomo_preprocessing extract_spectrum --input_path &lt;path-to-tomo&gt; --output_path &lt;path-to-output&gt;</code></li> <li>match_spectrum: Match amplitude of Fourier spectrum from input tomogram to target spectrum. Example: <code>tomo_preprocessing match_spectrum --input &lt;path-to-tomo&gt; --target &lt;path-to-spectrum&gt; --output &lt;path-to-output&gt;</code></li> </ul>"},{"location":"Usage/Preprocessing/#pixel-size-matching","title":"Pixel Size Matching","text":"<p>Pixel size matching is recommended when your tomogram pixel sizes differs strongly from the training pixel size range (roughly 10-14\u00c5). You can perform it using the command</p> <pre><code>tomo_preprocessing match_pixel_size --input_tomogram &lt;path-to-tomo&gt; --output_path &lt;path-to-output&gt; --pixel_size_out 10.0 --pixel_size_in &lt;your-px-size&gt;\n</code></pre> <p>after adjusting the paths to your respective tomograms. Afterwards, you can perform MemBrain's segmentation on the rescaled tomogram (i.e. the one specified in <code>--output_path</code>). Now, this new segmentation does not have the same shape as the original non-pixel-size-matched tomogram. To rescale the new segmentation to the original tomogram again, you can use</p> <pre><code>tomo_preprocessing match_seg_to_tomo --seg_path &lt;path-to-seg&gt; --orig_tomo_path &lt;path-to-tomo&gt; --output_path &lt;path-to-output&gt;\n</code></pre> <p>where the <code>--seg_path</code>is the segmentation created by MemBrain and the <code>--orig_tomo_path</code>is the original tomogram before rescaling to the new pixel size. The output of this function will be MemBrain's segmentation, but matched to the pixel size of the original tomogram.</p>"},{"location":"Usage/Preprocessing/#fourier-amplitude-matching","title":"Fourier Amplitude Matching","text":"<p>Fourier amplitude matching is performed in two steps:</p> <ol> <li>Extraction of the target Fourier spectrum: <pre><code>tomo_preprocessing extract_spectrum --input_path &lt;path-to-tomo&gt; --output_path &lt;path-to-output&gt;\n</code></pre> This extracts the radially averaged Fourier spectrum and stores it into a .tsv file.</li> <li>Matching of the input tomogram to the extracted spectrum: <pre><code>tomo_preprocessing match_spectrum --input &lt;path-to-tomo&gt; --target &lt;path-to-spectrum&gt; --output &lt;path-to-output&gt;\n</code></pre> Now, the input tomograms Fourier components are re-scaled based on the equalization kernel computed from the input tomogram's radially averaged Fourier intensities, and the previously extracted .tsv file.</li> </ol>"},{"location":"Usage/Segmentation/","title":"Segmentation","text":"<p>Explain how to segment your tomogram (using pre-trained model)</p>"},{"location":"Usage/Training/","title":"Training","text":"<p>How to train your own model?</p>"}]}